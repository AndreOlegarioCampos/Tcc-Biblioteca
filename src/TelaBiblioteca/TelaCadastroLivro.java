/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TelaBiblioteca;

import ClasseBancoDados.DataBaseBiblioteca;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Texugo Estudioso
 */
public class TelaCadastroLivro extends javax.swing.JFrame {

    /**
     * Creates new form TelaCadastroLivro
     */
    public TelaCadastroLivro() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNomeLivro = new javax.swing.JTextField();
        txtNomeAutor = new javax.swing.JTextField();
        txtEdicao = new javax.swing.JTextField();
        txtCodigoBarras = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabelaLivros = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("CADASTRO DE LIVROS");

        jLabel2.setText("Nome do livro:");

        jLabel3.setText("Nome do autor (a):");

        jLabel4.setText("Edicao:");

        jLabel5.setText("Codigo de barra:");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Consultar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        jTabelaLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Nome do Livro", "Edição", "Autor"
            }
        ));
        jScrollPane2.setViewportView(jTabelaLivros);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addComponent(txtNomeLivro, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(txtNomeAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(6, 6, 6)
                .addComponent(txtEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(6, 6, 6)
                .addComponent(txtCodigoBarras, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCadastrar)
                .addGap(33, 33, 33)
                .addComponent(btnEditar)
                .addGap(30, 30, 30)
                .addComponent(btnRemover)
                .addGap(18, 18, 18)
                .addComponent(btnPesquisar))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(325, 325, 325)
                .addComponent(btnVoltar))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2))
                    .addComponent(txtNomeLivro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3))
                    .addComponent(txtNomeAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addComponent(txtEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5))
                    .addComponent(txtCodigoBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCadastrar)
                    .addComponent(btnEditar)
                    .addComponent(btnRemover)
                    .addComponent(btnPesquisar))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnVoltar))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
    String nomeLivro = txtNomeLivro.getText().trim();
    String nomeAutor = txtNomeAutor.getText().trim();
    String edicao = txtEdicao.getText().trim();
    String codigoBarras = txtCodigoBarras.getText().trim();

    // Verificação de campos obrigatórios
    if (nomeLivro.isEmpty() || nomeAutor.isEmpty() || codigoBarras.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos obrigatórios.");
        return;
    }

    try (Connection conn = DataBaseBiblioteca.getConnection();
         PreparedStatement stmt = conn.prepareStatement("INSERT INTO livros (nomeLivro, nomeAutor, edicao, codBarras) VALUES (?, ?, ?, ?)")) {
        
        stmt.setString(1, nomeLivro);
        stmt.setString(2, nomeAutor);
        stmt.setString(3, edicao);
        stmt.setInt(4, Integer.parseInt(codigoBarras));
        stmt.executeUpdate();
        
        JOptionPane.showMessageDialog(this, "Livro cadastrado com sucesso!");
        atualizarTabelaLivros();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao cadastrar livro: " + e.getMessage());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Código de barras deve ser um número.");
    }

    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
int selectedRow = jTabelaLivros.getSelectedRow();
    if (selectedRow != -1) {
        int codigoBarras = (int) jTabelaLivros.getValueAt(selectedRow, 0);
        String nomeLivro = (String) jTabelaLivros.getValueAt(selectedRow, 1);
        String edicao = (String) jTabelaLivros.getValueAt(selectedRow, 2);
        String nomeAutor = (String) jTabelaLivros.getValueAt(selectedRow, 3);

        // Preencher os campos com dados do livro
        txtCodigoBarras.setText(String.valueOf(codigoBarras));
        txtNomeLivro.setText(nomeLivro);
        txtEdicao.setText(edicao);
        txtNomeAutor.setText(nomeAutor);
        
        // Alterar o texto do botão para "Atualizar"
        btnCadastrar.setText("Atualizar");

        // Remover action listeners anteriores
        for (ActionListener listener : btnCadastrar.getActionListeners()) {
            btnCadastrar.removeActionListener(listener);
        }

        // Adicionar um novo ActionListener para o botão
        btnCadastrar.addActionListener(evt1 -> atualizarLivro(codigoBarras));
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um livro para editar.");
    }
    }//GEN-LAST:event_btnEditarActionPerformed
private void atualizarLivro(int codigoBarras) {
    String nomeLivro = txtNomeLivro.getText().trim();
    String edicao = txtEdicao.getText().trim();
    String nomeAutor = txtNomeAutor.getText().trim();
    
    // Verificação de campos obrigatórios
    if (nomeLivro.isEmpty() || nomeAutor.isEmpty() || edicao.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos obrigatórios.");
        return;
    }

    try (Connection conn = DataBaseBiblioteca.getConnection();
         PreparedStatement stmt = conn.prepareStatement("UPDATE livros SET nomeLivro = ?, edicao = ?, nomeAutor = ? WHERE codBarras = ?")) {
        
        stmt.setString(1, nomeLivro);
        stmt.setString(2, edicao);
        stmt.setString(3, nomeAutor);
        stmt.setInt(4, codigoBarras);
        int rowsAffected = stmt.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Livro atualizado com sucesso!");
            atualizarTabelaLivros();
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum livro foi atualizado. Verifique o código de barras.");
        }
        
        // Resetar o botão de cadastrar para "Cadastrar"
        btnCadastrar.setText("Cadastrar");
        
        // Remover o ActionListener de atualizar
        for (ActionListener listener : btnCadastrar.getActionListeners()) {
            btnCadastrar.removeActionListener(listener);
        }
        // Re-adicionar o ActionListener original
        btnCadastrar.addActionListener(evt -> btnCadastrarActionPerformed(evt));
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar livro: " + e.getMessage());
    }
}
    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
int selectedRow = jTabelaLivros.getSelectedRow();
    if (selectedRow != -1) {
        int codigoBarras = (int) jTabelaLivros.getValueAt(selectedRow, 0); // Código de barras na primeira coluna

        int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja remover este livro?", "Confirmar remoção", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DataBaseBiblioteca.getConnection();
                 PreparedStatement stmt = conn.prepareStatement("DELETE FROM livros WHERE codBarras = ?")) {
                
                stmt.setInt(1, codigoBarras);
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Livro removido com sucesso!");
                atualizarTabelaLivros();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao remover livro: " + e.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um livro para remover.");
    }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
String codigoBarras = txtCodigoBarras.getText().trim();
    String nomeLivro = txtNomeLivro.getText().trim();
    String nomeAutor = txtNomeAutor.getText().trim();

    if (codigoBarras.isEmpty() && nomeLivro.isEmpty() && nomeAutor.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, digite o Código de Barras, Nome do Livro ou Nome do Autor.");
        return;
    }
    atualizarTabelaLivros(codigoBarras, nomeLivro, nomeAutor);
    }//GEN-LAST:event_btnPesquisarActionPerformed
private void atualizarTabelaLivros() {
    DefaultTableModel model = (DefaultTableModel) jTabelaLivros.getModel();
    model.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

    try (Connection conn = DataBaseBiblioteca.getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT codBarras, nomeLivro, edicao, nomeAutor FROM livros")) {

        while (rs.next()) {
            Object[] row = {
                rs.getInt("codBarras"),
                rs.getString("nomeLivro"),
                rs.getString("edicao"),
                rs.getString("nomeAutor")
            };
            model.addRow(row); // Adiciona cada linha à tabela
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar a tabela: " + e.getMessage());
    }
}

private void atualizarTabelaLivros(String codigoBarras, String nomeLivro, String nomeAutor) {
    DefaultTableModel model = (DefaultTableModel) jTabelaLivros.getModel();
    model.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

    StringBuilder sql = new StringBuilder("SELECT codBarras, nomeLivro, edicao, nomeAutor FROM livros WHERE 1=1");

    // Adiciona filtros à consulta dependendo dos campos preenchidos
    if (!codigoBarras.isEmpty()) {
        sql.append(" AND codBarras = ?");
    }
    if (!nomeLivro.isEmpty()) {
        sql.append(" AND nomeLivro LIKE ?");
    }
    if (!nomeAutor.isEmpty()) {
        sql.append(" AND nomeAutor LIKE ?");
    }

    try (Connection conn = DataBaseBiblioteca.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql.toString())) {

        int index = 1;

        // Define os parâmetros do PreparedStatement
        if (!codigoBarras.isEmpty()) {
            stmt.setInt(index++, Integer.parseInt(codigoBarras));
        }
        if (!nomeLivro.isEmpty()) {
            stmt.setString(index++, "%" + nomeLivro + "%"); // LIKE para busca parcial
        }
        if (!nomeAutor.isEmpty()) {
            stmt.setString(index++, "%" + nomeAutor + "%"); // LIKE para busca parcial
        }

        try (ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("codBarras"),
                    rs.getString("nomeLivro"),
                    rs.getString("edicao"),
                    rs.getString("nomeAutor")
                };
                model.addRow(row); // Adiciona cada linha à tabela
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar a tabela: " + e.getMessage());
    }
}
    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        dispose(); // Fecha a tela atual
        TelaMenu telaMenu = new TelaMenu();
        telaMenu.setVisible(true); // Abre a nova tela
    }//GEN-LAST:event_btnVoltarActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroLivro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCadastroLivro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTabelaLivros;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCodigoBarras;
    private javax.swing.JTextField txtEdicao;
    private javax.swing.JTextField txtNomeAutor;
    private javax.swing.JTextField txtNomeLivro;
    // End of variables declaration//GEN-END:variables
}
