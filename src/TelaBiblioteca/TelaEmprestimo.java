/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TelaBiblioteca;
import ClasseBancoDados.DataBaseBiblioteca;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
/**
 *
 * @author Texugo Estudioso
 */
public class TelaEmprestimo extends javax.swing.JFrame {

    /**
     * Creates new form TelaEmprestimo
     */
    public TelaEmprestimo() {
        initComponents();
        limparTabelaCarrinho();
        
    }
    // Método para limpar a tabela de carrinho
private void limparTabelaCarrinho() {
    DefaultTableModel modeloCarrinho = (DefaultTableModel) jTabelaCarrinho.getModel();
    modeloCarrinho.setRowCount(0); // Limpa todas as linhas da tabela
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNomeLeitor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCpfLeitor = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtNomeLivro = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCodigoBarras = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtNomeAutor = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabelaLivro = new javax.swing.JTable();
        tnPesquisarLivro = new javax.swing.JButton();
        btnLimparPesquisaLivro = new javax.swing.JButton();
        btnAdicionarCarrinho = new javax.swing.JButton();
        btnRemoverCarrinho = new javax.swing.JButton();
        btnLimpar1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabelaLeitor = new javax.swing.JTable();
        btnFinalizarEmprestimo = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnCancelarEmprestimo = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTabelaCarrinho = new javax.swing.JTable();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("EMPRESTIMO DE LIVROS");

        jLabel2.setText("Nome do leitor:");

        jLabel3.setText("CPF:");

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel5.setText("Nome do livro:");

        jLabel6.setText("Codigo de barras:");

        jLabel7.setText("Nome do autor (a):");

        jTabelaLivro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Nome do Livro", "Edição", "Autor"
            }
        ));
        jScrollPane1.setViewportView(jTabelaLivro);

        tnPesquisarLivro.setText("Pesquisar");
        tnPesquisarLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tnPesquisarLivroActionPerformed(evt);
            }
        });

        btnLimparPesquisaLivro.setText("Limpar");
        btnLimparPesquisaLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparPesquisaLivroActionPerformed(evt);
            }
        });

        btnAdicionarCarrinho.setText("Adicionar no carrinho");
        btnAdicionarCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarCarrinhoActionPerformed(evt);
            }
        });

        btnRemoverCarrinho.setText("Remover do carrinho");
        btnRemoverCarrinho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverCarrinhoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNomeLivro))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigoBarras))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNomeAutor))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(tnPesquisarLivro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLimparPesquisaLivro)
                                .addGap(59, 59, 59)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnAdicionarCarrinho)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoverCarrinho)
                        .addGap(19, 19, 19))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtNomeLivro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCodigoBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtNomeAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tnPesquisarLivro)
                    .addComponent(btnLimparPesquisaLivro))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdicionarCarrinho)
                    .addComponent(btnRemoverCarrinho)))
        );

        btnLimpar1.setText("Limpar");
        btnLimpar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpar1ActionPerformed(evt);
            }
        });

        jTabelaLeitor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "CPF", "Telefone"
            }
        ));
        jScrollPane2.setViewportView(jTabelaLeitor);

        btnFinalizarEmprestimo.setText("Finalizar emprestimo");
        btnFinalizarEmprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarEmprestimoActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnCancelarEmprestimo.setText("Cancelar emprestimo");
        btnCancelarEmprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarEmprestimoActionPerformed(evt);
            }
        });

        jTabelaCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome do livro", "codigo", "Autor"
            }
        ));
        jScrollPane3.setViewportView(jTabelaCarrinho);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNomeLeitor))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpfLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpar1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnFinalizarEmprestimo)
                                        .addGap(26, 26, 26)
                                        .addComponent(btnCancelarEmprestimo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnVoltar))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNomeLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCpfLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar)
                    .addComponent(btnLimpar1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFinalizarEmprestimo)
                    .addComponent(btnCancelarEmprestimo)
                    .addComponent(btnVoltar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
    dispose(); // Fecha a tela atual
        TelaMenu telaMenu = new TelaMenu();
        telaMenu.setVisible(true); // Abre a nova tela
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
    String nomeConsulta = txtNomeLeitor.getText().trim();
    String cpfConsulta = txtCpfLeitor.getText().trim(); // Corrigido para usar txtCpfLeitor
    
    // Verifica se pelo menos um dos campos está preenchido
    if (nomeConsulta.isEmpty() && cpfConsulta.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, digite o CPF ou o Nome para consultar.");
        return;
    }

    String sql = "SELECT * FROM leitores WHERE (nome LIKE ? OR ? = '') AND (cpf = ? OR ? = '')";
    try (Connection conn = DataBaseBiblioteca.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        
        stmt.setString(1, "%" + nomeConsulta + "%"); // Busca por nome
        stmt.setString(2, nomeConsulta); // Para garantir que não haja filtro se o nome estiver vazio
        stmt.setString(3, cpfConsulta); // Busca por CPF
        stmt.setString(4, cpfConsulta); // Para garantir que não haja filtro se o CPF estiver vazio

        try (ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTabelaLeitor.getModel();
            model.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

            if (rs.next()) {
                // Adiciona o leitor encontrado à tabela
                model.addRow(new Object[]{
                    rs.getString("nome"),
                    rs.getString("cpf"),
                    rs.getString("tel")
                });

                // Cria uma StringBuilder para armazenar os detalhes do leitor
                StringBuilder detalhes = new StringBuilder();
                detalhes.append("Nome: ").append(rs.getString("nome")).append("\n");
                detalhes.append("Data de Nascimento: ").append(rs.getDate("dataNasc")).append("\n");
                detalhes.append("CPF: ").append(rs.getString("cpf")).append("\n");
                detalhes.append("Celular: ").append(rs.getString("tel")).append("\n");
                detalhes.append("CEP: ").append(rs.getString("cep")).append("\n");
                detalhes.append("Endereço: ").append(rs.getString("endereco")).append("\n");
                detalhes.append("Número: ").append(rs.getString("numero")).append("\n");
                detalhes.append("Complemento: ").append(rs.getString("complemento")).append("\n");

                // Exibe os detalhes em um JOptionPane
                JOptionPane.showMessageDialog(this, detalhes.toString(), "Detalhes do Leitor", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Leitor não encontrado.");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao consultar leitores: " + e.getMessage());
    }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnLimpar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpar1ActionPerformed
    txtNomeLeitor.setText("");
    txtCpfLeitor.setText("");
    DefaultTableModel model = (DefaultTableModel) jTabelaLeitor.getModel();
    model.setRowCount(0); // Limpa a tabela de leitores
    }//GEN-LAST:event_btnLimpar1ActionPerformed

    private void tnPesquisarLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tnPesquisarLivroActionPerformed
    String codigoBarras = txtCodigoBarras.getText().trim();
    String nomeLivro = txtNomeLivro.getText().trim();
    String nomeAutor = txtNomeAutor.getText().trim();

    if (codigoBarras.isEmpty() && nomeLivro.isEmpty() && nomeAutor.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, digite o Código de Barras, Nome do Livro ou Nome do Autor.");
        return;
    }
    atualizarTabelaLivros(codigoBarras, nomeLivro, nomeAutor);
    }//GEN-LAST:event_tnPesquisarLivroActionPerformed
private void atualizarTabelaLivros(String codigoBarras, String nomeLivro, String nomeAutor) {
    DefaultTableModel model = (DefaultTableModel) jTabelaLivro.getModel();
    model.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

    // Consulta SQL ajustada para usar "disponivel"
    StringBuilder sql = new StringBuilder("SELECT codBarras, nomeLivro, edicao, nomeAutor FROM livros WHERE disponivel = TRUE");

    // Adiciona filtros à consulta dependendo dos campos preenchidos
    if (!codigoBarras.isEmpty()) {
        sql.append(" AND codBarras = ?");
    }
    if (!nomeLivro.isEmpty()) {
        sql.append(" AND nomeLivro LIKE ?");
    }
    if (!nomeAutor.isEmpty()) {
        sql.append(" AND nomeAutor LIKE ?");
    }

    try (Connection conn = DataBaseBiblioteca.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql.toString())) {

        int index = 1;

        // Define os parâmetros do PreparedStatement
        if (!codigoBarras.isEmpty()) {
            stmt.setString(index++, codigoBarras); // Usa String para codBarras
        }
        if (!nomeLivro.isEmpty()) {
            stmt.setString(index++, "%" + nomeLivro + "%"); // LIKE para busca parcial
        }
        if (!nomeAutor.isEmpty()) {
            stmt.setString(index++, "%" + nomeAutor + "%"); // LIKE para busca parcial
        }

        try (ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Object[] row = {
                    rs.getString("codBarras"),
                    rs.getString("nomeLivro"),
                    rs.getString("edicao"),
                    rs.getString("nomeAutor")
                };
                model.addRow(row); // Adiciona cada linha à tabela
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar a tabela: " + e.getMessage());
        e.printStackTrace(); // Mostra detalhes do erro no console
    }

}
    private void btnLimparPesquisaLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparPesquisaLivroActionPerformed
    // Limpa os campos de texto
    txtCodigoBarras.setText("");
    txtNomeLivro.setText("");
    txtNomeAutor.setText("");

    // Limpa a tabela de livros
    DefaultTableModel modeloLivro = (DefaultTableModel) jTabelaLivro.getModel();
    modeloLivro.setRowCount(0); // Limpa a tabela de livros

    // Exibe uma mensagem de confirmação (opcional)
    JOptionPane.showMessageDialog(this, "Pesquisa de livros limpa.");  
    }//GEN-LAST:event_btnLimparPesquisaLivroActionPerformed

    private void btnAdicionarCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarCarrinhoActionPerformed
DefaultTableModel modeloCarrinho = (DefaultTableModel) jTabelaCarrinho.getModel();
    int maxLivros = 3;

    // Verifica se o carrinho já contém 3 livros
    if (modeloCarrinho.getRowCount() >= maxLivros) {
        JOptionPane.showMessageDialog(this, "O carrinho já contém o máximo de " + maxLivros + " livros.");
        return;
    }

    // Verifica se um livro foi selecionado na tabela de livros
    int selectedRow = jTabelaLivro.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecione um livro da tabela para adicionar ao carrinho.");
        return;
    }

    // Obtém os dados do livro selecionado na tabela
    String nomeLivro = (String) jTabelaLivro.getValueAt(selectedRow, 1); // Assumindo que o nome do livro está na segunda coluna
    String codigoBarras = (String) jTabelaLivro.getValueAt(selectedRow, 0); // Assumindo que o código de barras está na primeira coluna
    String nomeAutor = (String) jTabelaLivro.getValueAt(selectedRow, 3); // Assumindo que o nome do autor está na quarta coluna

    // Cria um array com os dados do livro a ser adicionado
    Object[] rowData = {nomeLivro, codigoBarras, nomeAutor};

    // Adiciona o novo livro ao carrinho
    modeloCarrinho.addRow(rowData);
    
    // Exibe o nome do livro no JOptionPane
    JOptionPane.showMessageDialog(this, nomeLivro + " adicionado ao carrinho!");
    }//GEN-LAST:event_btnAdicionarCarrinhoActionPerformed

    private void btnRemoverCarrinhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverCarrinhoActionPerformed
DefaultTableModel modeloCarrinho = (DefaultTableModel) jTabelaCarrinho.getModel();
    int selectedRow = jTabelaCarrinho.getSelectedRow();
    
    if (selectedRow >= 0) {
        modeloCarrinho.removeRow(selectedRow);
        JOptionPane.showMessageDialog(this, "Livro removido do carrinho!");
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um livro para remover!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnRemoverCarrinhoActionPerformed

    private void btnFinalizarEmprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarEmprestimoActionPerformed
  // Seleciona o leitor
int selectedRowLeitor = jTabelaLeitor.getSelectedRow();
if (selectedRowLeitor == -1) {
    JOptionPane.showMessageDialog(this, "Por favor, selecione um leitor.");
    return;
}

// Obtém o ID do leitor
Object idValue = jTabelaLeitor.getValueAt(selectedRowLeitor, 1); // ID está na coluna 1
int leitorId;
try {
    leitorId = Integer.parseInt(idValue.toString());
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "ID do leitor não é válido.");
    return;
}

Connection conn = null;
try {
    conn = DataBaseBiblioteca.getConnection();
    conn.setAutoCommit(false); // Inicia a transação

    // 1. Verifica se o ID do leitor existe na tabela "leitores"
    String sqlCheckLeitor = "SELECT COUNT(*) FROM leitores WHERE id_leitor = ?";
    try (PreparedStatement stmtCheckLeitor = conn.prepareStatement(sqlCheckLeitor)) {
        stmtCheckLeitor.setInt(1, leitorId);
        ResultSet rsLeitor = stmtCheckLeitor.executeQuery();
        if (rsLeitor.next() && rsLeitor.getInt(1) == 0) {
            JOptionPane.showMessageDialog(this, "Leitor não encontrado.");
            return; // Sai do método, sem continuar o processo
        }
    }

    // 2. Verifica se há livros no carrinho
    DefaultTableModel modeloCarrinho = (DefaultTableModel) jTabelaCarrinho.getModel();
    if (modeloCarrinho.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "O carrinho está vazio. Adicione pelo menos um livro.");
        return;
    }

    List<String> codigosLivros = new ArrayList<>();
    for (int i = 0; i < modeloCarrinho.getRowCount(); i++) {
        String codigoBarras = (String) modeloCarrinho.getValueAt(i, 1); // Obtém o código de barras do livro
        codigosLivros.add(codigoBarras);
    }

    // 3. Atualiza a disponibilidade dos livros
    String sqlUpdateLivro = "UPDATE livros SET disponivel = FALSE WHERE codBarras = ?";
    try (PreparedStatement stmtUpdateLivro = conn.prepareStatement(sqlUpdateLivro)) {
        for (String codigoBarras : codigosLivros) {
            stmtUpdateLivro.setString(1, codigoBarras);
            stmtUpdateLivro.executeUpdate();
        }
    }

    // 4. Insere o empréstimo na tabela "emprestimos"
    String sqlInsertEmprestimo = "INSERT INTO emprestimos (id_leitor, codigo_livro, status) VALUES (?, ?, ?)";
    try (PreparedStatement stmtInsertEmprestimo = conn.prepareStatement(sqlInsertEmprestimo)) {
        for (String codigoBarras : codigosLivros) {
            stmtInsertEmprestimo.setInt(1, leitorId); // ID do leitor
            stmtInsertEmprestimo.setString(2, codigoBarras); // Código do livro
            stmtInsertEmprestimo.setString(3, "Em Andamento"); // Status do empréstimo
            stmtInsertEmprestimo.executeUpdate();
        }
    }

    // 5. Atualiza a coluna 'livros' na tabela 'leitores'
    String sqlUpdateLivrosLeitor = "UPDATE leitores SET livros = CONCAT(livros, ?, ', ') WHERE id_leitor = ?";
    try (PreparedStatement stmtUpdateLivrosLeitor = conn.prepareStatement(sqlUpdateLivrosLeitor)) {
        for (String codigoBarras : codigosLivros) {
            stmtUpdateLivrosLeitor.setString(1, codigoBarras); // Adiciona o código de barras do livro
            stmtUpdateLivrosLeitor.setInt(2, leitorId); // ID do leitor
            stmtUpdateLivrosLeitor.executeUpdate();
        }
    }

    // Comita as transações (salva no banco)
    conn.commit();

    // Limpa o carrinho e exibe uma mensagem de sucesso
    modeloCarrinho.setRowCount(0); // Limpa o carrinho
    JOptionPane.showMessageDialog(this, "Empréstimo finalizado com sucesso!");
   
} catch (SQLException e) {
    // Caso haja erro, faz rollback da transação
    if (conn != null) {
        try {
            conn.rollback(); // Faz o rollback se algo der errado
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace(); // Mostra o erro do rollback
        }
    }
    JOptionPane.showMessageDialog(this, "Erro ao finalizar o empréstimo: " + e.getMessage());
    e.printStackTrace();
} finally {
    // Garante que a conexão será fechada, se aberta
    if (conn != null) {
        try {
            conn.setAutoCommit(true); // Restaura o modo de commit automático
            conn.close(); // Fecha a conexão
        } catch (SQLException closeEx) {
            closeEx.printStackTrace();
        }
    }
}


    }//GEN-LAST:event_btnFinalizarEmprestimoActionPerformed

    private void btnCancelarEmprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarEmprestimoActionPerformed
    // Limpa os campos de texto
    txtNomeLeitor.setText("");
    txtCpfLeitor.setText("");
    txtCodigoBarras.setText("");
    txtNomeLivro.setText("");
    txtNomeAutor.setText("");

    // Limpa as tabelas
    DefaultTableModel modeloLeitor = (DefaultTableModel) jTabelaLeitor.getModel();
    modeloLeitor.setRowCount(0); // Limpa a tabela de leitores

    DefaultTableModel modeloLivro = (DefaultTableModel) jTabelaLivro.getModel();
    modeloLivro.setRowCount(0); // Limpa a tabela de livros

    DefaultTableModel modeloCarrinho = (DefaultTableModel) jTabelaCarrinho.getModel();
    modeloCarrinho.setRowCount(0); // Limpa a tabela do carrinho

    // Exibe uma mensagem de confirmação
    JOptionPane.showMessageDialog(this, "Empréstimo cancelado.");
    }//GEN-LAST:event_btnCancelarEmprestimoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEmprestimo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarCarrinho;
    private javax.swing.JButton btnCancelarEmprestimo;
    private javax.swing.JButton btnFinalizarEmprestimo;
    private javax.swing.JButton btnLimpar1;
    private javax.swing.JButton btnLimparPesquisaLivro;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnRemoverCarrinho;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTabelaCarrinho;
    private javax.swing.JTable jTabelaLeitor;
    private javax.swing.JTable jTabelaLivro;
    private javax.swing.JButton tnPesquisarLivro;
    private javax.swing.JTextField txtCodigoBarras;
    private javax.swing.JTextField txtCpfLeitor;
    private javax.swing.JTextField txtNomeAutor;
    private javax.swing.JTextField txtNomeLeitor;
    private javax.swing.JTextField txtNomeLivro;
    // End of variables declaration//GEN-END:variables
}
