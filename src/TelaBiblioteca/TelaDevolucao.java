/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TelaBiblioteca;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import ClasseBancoDados.DataBaseBiblioteca;
/**
 *
 * @author Texugo Estudioso
 */
public class TelaDevolucao extends javax.swing.JFrame {

    /**
     * Creates new form TelaDevolucao
     */
    public TelaDevolucao() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtabelaLivros = new javax.swing.JTable();
        btnDevolver = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        txtNomeLeitor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("DEVOLUCAO");

        jLabel2.setText("Nome do leitor:");

        jLabel3.setText("CPF:");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jtabelaLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Nome do Livro", "Edição", "Autor"
            }
        ));
        jScrollPane1.setViewportView(jtabelaLivros);

        btnDevolver.setText("Devolver");
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        txtNomeLeitor.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtNomeLeitor)
                            .addGap(22, 22, 22))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(155, 155, 155)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(btnDevolver)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNomeLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnBuscar)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDevolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(btnVoltar))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
   String cpfLeitor = jTextField2.getText().trim();
    
    if (cpfLeitor.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, informe o CPF do leitor.");
        return;
    }

    try (Connection conn = DataBaseBiblioteca.getConnection()) {
        // Busca o leitor pelo CPF
        String sqlLeitor = "SELECT * FROM leitores WHERE cpf = ?";
        try (PreparedStatement stmtLeitor = conn.prepareStatement(sqlLeitor)) {
            stmtLeitor.setString(1, cpfLeitor);
            ResultSet rsLeitor = stmtLeitor.executeQuery();

            if (rsLeitor.next()) {
                // Mostra o nome do leitor no campo de texto
                txtNomeLeitor.setText(rsLeitor.getString("nome"));
                
                // Busca os livros associados a este leitor
                String livrosEmprestados = rsLeitor.getString("Livros");
                if (livrosEmprestados != null && !livrosEmprestados.isEmpty()) {
                    // Divide os códigos de barras
                    String[] codigosLivros = livrosEmprestados.split(",\\s*");
                    
                    // Limpa a tabela antes de adicionar os novos dados
                    DefaultTableModel model = (DefaultTableModel) jtabelaLivros.getModel();
                    model.setRowCount(0);
                    
                    for (String codigoBarras : codigosLivros) {
                        // Busca os detalhes do livro
                        String sqlLivros = "SELECT * FROM livros WHERE codBarras = ?";
                        try (PreparedStatement stmtLivros = conn.prepareStatement(sqlLivros)) {
                            stmtLivros.setString(1, codigoBarras);
                            ResultSet rsLivros = stmtLivros.executeQuery();
                            
                            if (rsLivros.next()) {
                                // Adiciona os detalhes do livro à tabela
                                model.addRow(new Object[]{
                                    rsLivros.getString("codBarras"),
                                    rsLivros.getString("nomeLivro"),
                                    rsLivros.getString("edicao"),
                                    rsLivros.getString("nomeAutor")
                                });
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Este leitor não possui livros emprestados.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Leitor não encontrado.");
                txtNomeLeitor.setText("");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao buscar leitor: " + e.getMessage());
    }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
     // Obtém o modelo da tabela
    DefaultTableModel model = (DefaultTableModel) jtabelaLivros.getModel();
    
    // Verifica se há livros selecionados
    int[] selectedRows = jtabelaLivros.getSelectedRows();
    if (selectedRows.length == 0) {
        JOptionPane.showMessageDialog(this, "Nenhum livro selecionado para devolver.");
        return;
    }

    StringBuilder livrosDevolvidos = new StringBuilder();
    
    try (Connection conn = DataBaseBiblioteca.getConnection()) {
        conn.setAutoCommit(false); // Inicia a transação

        for (int i = selectedRows.length - 1; i >= 0; i--) {
            int rowIndex = selectedRows[i];
            String codigoBarras = (String) model.getValueAt(rowIndex, 0);
            String nomeLivro = (String) model.getValueAt(rowIndex, 1);
            livrosDevolvidos.append(nomeLivro).append(", ");

            // Atualiza a disponibilidade do livro
            String sqlUpdateLivro = "UPDATE livros SET disponivel = TRUE WHERE codBarras = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sqlUpdateLivro)) {
                stmt.setString(1, codigoBarras);
                stmt.executeUpdate();
            }
            
            model.removeRow(rowIndex); // Remove a linha da tabela
        }

        // Completa a transação
        conn.commit();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar disponibilidade do livro: " + e.getMessage());
        return; // Retorna em caso de erro
    }

    // Remove a vírgula e o espaço final
    if (livrosDevolvidos.length() > 0) {
        livrosDevolvidos.setLength(livrosDevolvidos.length() - 2);
    }

    // Atualiza a lista de livros do leitor sem limpar datas
    String cpf = jTextField2.getText().trim();
    String sqlUpdateLeitor = "UPDATE leitores SET livros = '' WHERE cpf = ?";
    try (Connection conn = DataBaseBiblioteca.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sqlUpdateLeitor)) {
        stmt.setString(1, cpf);
        stmt.executeUpdate();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar dados do leitor: " + e.getMessage());
    }

    JOptionPane.showMessageDialog(this, "Devolução finalizada com sucesso! Livros devolvidos: " + livrosDevolvidos);
    txtNomeLeitor.setText(""); // Limpa o campo de nome
    jTextField2.setText(""); // Limpa o campo de CPF
    }//GEN-LAST:event_btnDevolverActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
    dispose(); // Fecha a tela atual
        TelaMenu telaMenu = new TelaMenu();
        telaMenu.setVisible(true); // Abre a nova tela
    }//GEN-LAST:event_btnVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaDevolucao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaDevolucao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaDevolucao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaDevolucao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaDevolucao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnDevolver;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable jtabelaLivros;
    private javax.swing.JTextField txtNomeLeitor;
    // End of variables declaration//GEN-END:variables
}
